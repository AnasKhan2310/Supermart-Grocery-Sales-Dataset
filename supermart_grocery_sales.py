# -*- coding: utf-8 -*-
"""Supermart Grocery Sales .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YoHgrn7JVojDmS2TMn1JRcEJ_dqYX0l1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

df = pd.read_csv('Supermart Grocery Sales Dataset.csv')

df.head()

print("1. REGION WITH MOST SALES:")
sales_by_region = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)
print(sales_by_region)
print(f"\nAnswer: {sales_by_region.idxmax()} region has the most sales with {sales_by_region.max():,.2f}")

print("2. REGION WITH HIGHEST PROFIT:")
profit_by_region = df.groupby('Region')['Profit'].sum().sort_values(ascending=False)
print(profit_by_region)
print(f"\nAnswer: {profit_by_region.idxmax()} region has the highest profit with {profit_by_region.max():,.2f}")

print("3. MOST FREQUENT CUSTOMER:")
customer_frequency = df['Customer Name'].value_counts()
print(customer_frequency.head(10))
print(f"\nAnswer: {customer_frequency.idxmax()} is the most frequent customer with {customer_frequency.max()} purchases")

print("4. MOST PROFITABLE CATEGORY IN SOUTH REGION:")
south_data = df[df['Region'] == 'South']
categories = ['Beverages', 'Bakery', 'Snacks']
south_category_profit = south_data[south_data['Category'].isin(categories)].groupby('Category')['Profit'].sum().sort_values(ascending=False)
print(south_category_profit)
if len(south_category_profit) > 0:
    print(f"\nAnswer: {south_category_profit.idxmax()} is the most profitable in South region with {south_category_profit.max():,.2f}")

df['Order Date'] = pd.to_datetime(df['Order Date'], errors='coerce', infer_datetime_format=True)
daily_sales = df.groupby('Order Date')['Sales'].sum().reset_index()

# Prepare data for regression
X = np.array((daily_sales['Order Date'] - daily_sales['Order Date'].min()).dt.days).reshape(-1,1)
y = daily_sales['Sales'].values

model = LinearRegression()
model.fit(X,y)
y_pred = model.predict(X)

plt.figure(figsize=(10,5))
plt.scatter(daily_sales['Order Date'], y, color='blue', s=10, label='Daily Sales')
plt.plot(daily_sales['Order Date'], y_pred, color='red', label='Trend Line')
plt.title('Sales Trend Over Time')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

trend = model.coef_[0]
if trend > 0:
    print("Sales trend: increasing")
else:
    print("Sales trend: decreasing")